{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    /*
    This is a way to enable unmanaged debugging of unit tests with GDB. Since the tests
    that you may want to debug vary I leave it commented out. It is advisable to
    build mono locally so that all debug information is available. Mine sits in
    /opt/mono5-dbg.
    This configuration requires the `webfreak.debug` extension.
    {
      "type": "gdb",
      "request": "launch",
      "name": "GDB debug tests",
      "target": "/opt/mono5-dbg/bin/mono-sgen",
      "cwd": "${workspaceRoot}/Output_x86_64/Debug",
      "arguments": " --debug ../../NUnit.Runners.Net4.2.6.4/tools/nunit-console.exe -run=SIL.FieldWorks.Common.Widgets.FwListBoxTests.Add_EmptyObjectCollection_CollectionContainsSingleElement WidgetsTests.dll",
      "env": {
        "DISPLAY": ":0",
        "PATH": "/opt/mono5-dbg/bin:/opt/mono5-sil/bin:${workspaceRoot}/Output_x86_64/Debug:/usr/lib/fieldworks/icu-bin:${workspaceRoot}/../libcom/COM/buildx86_64/bin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "LD_LIBRARY_PATH": "/opt/mono5-dbg/lib:/opt/mono5-sil/lib:/usr/lib/fieldworks:${workspaceRoot}/Output_x86_64/Debug:/usr/lib/fieldworks/lib:${workspaceRoot}/../libcom/COM/buildx86_64/lib:${workspaceRoot}/Output_x86_64/Debug/Firefox-Linux64:/usr/lib",
        "FW_ROOT": "${workspaceRoot}/DistFiles",
        "FW_ROOTCODE": "${workspaceRoot}/DistFiles",
        "FW_ROOTDATA": "${workspaceRoot}/DistFiles",
        "FW_CommonAppData": "${workspaceRoot}/Output_x86_64/VarLibFieldworks",
        "MONO_REGISTRY_PATH": "${workspaceRoot}/Output_x86_64/registry",
        "MONO_GAC_PREFIX": "/opt/mono5-dbg:/opt/mono5-sil:/usr/lib/fieldworks:/usr",
        "MONO_PATH": "${workspaceRoot}/DistFiles:${workspaceRoot}/Output_x86_64/Debug:/usr/lib/fieldworks",
        "MONO_TRACE_LISTENER": "Console.Out"
      }
    },
    // Remote debugging - helpful when debugging keyboarding problems
    // address is the IP address of the remote machine
    // In the VM start the process with:
    // mono --debug --debugger-agent="address=10.3.0.58:10000,transport=dt_socket,server=y" /full/path/on/VM/to/fw/Output_x86_64/Debug/FieldWorks.exe
    // Then attach to VM
    {
      "name": "Attach to VM",
      "type": "mono",
      "request": "attach",
      "address": "10.3.0.58",
      "port": 10000
    },
    // Remote unmanaged debugging - helpful when debugging keyboarding problems
    // target is the IP address/port of the remote machine
    // In the VM start the process with:
    // . environ && cd Output_x86_64/Debug && gdbserver :9999 /opt/mono5-sil/bin/mono-sgen --debug FieldWorks.exe
    // Then attach to VM
    {
      "type": "gdb",
      "request": "attach",
      "name": "Attach to gdbserver",
      "executable": "/opt/mono5-sil/bin/mono-sgen",
      "target": "10.3.0.58:9999",
      "remote": true,
      "cwd": "${workspaceRoot}/Output_x86_64/Debug",
      "gdbpath": "/usr/bin/gdb",
      "autorun": [
        "set sysroot target:/"
      ]
    },
    */
    {
      "name": "Launch FW from workspace",
      "env": {
        // Use Flexbridge from code, rather than a package, if desired.
        "FLEXBRIDGEDIR": "${workspaceRoot}/../flexbridge/output/Debug/net461",
        // Send and receive to the QA LanguageForge server instead of production, if desired.
        "LANGUAGEFORGESERVER": "-qa.languageforge.org",
        // Display on main display :0, or on a Xephyr :2.
        "DISPLAY": ":0",
        // Help FW+PT find FW. This could be set in environ, but because it needs set on a user's machine independently of environ, it's set here.
        "FIELDWORKSDIR": "${workspaceRoot}/Output/Debug",
        // When launching FieldWorks, use this mono.
        "PATH": "/opt/mono5-sil/bin:${env:PATH}",
        // Path to the rest of the necessary enviromnent settings for FieldWorks. This is handled by a mono wrapper script in /opt.
        "MONO_ENVIRON": "${workspaceRoot}/environ"
      },
      "type": "mono",
      "request": "launch",
      "program": "${workspaceRoot}/Output/Debug/FieldWorks.exe",
      "cwd": "${workspaceRoot}"
      // Optionally first build recently changed files.
      // "preLaunchTask": "build recent"
    },
    {
      "name": "Launch FW from flatpak (to attach debugger)",
      "env": {
        // Use Flexbridge from code, rather than a package, if desired.
        // "FLEXBRIDGEDIR": "${workspaceRoot}/../flexbridge/output/Debug/net461",
        // Display on main display :0, or on a Xephyr :2.
        "DISPLAY": ":0",
        // Help FW+PT find FW. This could be set in environ, but because it needs set on a user's machine independently of environ, it's set here.
        "FIELDWORKSDIR": "${workspaceRoot}/Output/Debug",
        // When launching FieldWorks, use this mono.
        // "PATH": "/opt/mono5-sil/bin:${env:PATH}",
        // Path to the rest of the necessary enviromnent settings for FieldWorks. This is handled by a mono wrapper script in /opt.
        //"MONO_ENVIRON": "${workspaceRoot}/environ"
      },
      "type": "gdb",
      "request": "launch",
      "target": "/usr/bin/flatpak",
      // Use suspend=y to pause until a debugger attaches
      "arguments": "run --devel --env=FW_DEBUG=true --env=FW_MONO_OPTS=--debugger-agent=address=127.0.0.1:55555,transport=dt_socket,server=y,suspend=n org.sil.FieldWorks",
      "cwd": "${workspaceRoot}"
    },
    {
      "name": "Launch unit tests",
      "env": {
        // Use Flexbridge from code, rather than a package, if desired.
        "FLEXBRIDGEDIR": "${workspaceRoot}/../flexbridge/output/Debug/net461",
        // Display on main display :0, or on a Xephyr :2.
        "DISPLAY": ":0",
        // Help FW+PT find FW. This could be set in environ, but because it needs set on a user's machine independently of environ, it's set here.
        "FIELDWORKSDIR": "${workspaceRoot}/Output/Debug",
        // When launching FieldWorks, use this mono.
        "PATH": "/opt/mono5-sil/bin:${env:PATH}",
        // Path to the rest of the necessary enviromnent settings for FieldWorks. This is handled by a mono wrapper script in /opt.
        "MONO_ENVIRON": "${workspaceRoot}/environ"
      },
      "type": "mono",
      "request": "launch",
      "program": "${workspaceRoot}/Bin/NUnit/bin/nunit.exe",
      "args": [
      ],
      "cwd": "${workspaceRoot}/Output/Debug",
      "console": "integratedTerminal"
    },
    // To debug FW managed code in flatpak, run FieldWorks using the following, and then start the debugger:
    //   flatpak run --devel --env=FW_DEBUG=true --env=FW_MONO_OPTS=--debugger-agent=address=127.0.0.1:55555,transport=dt_socket,server=y,suspend=n org.sil.FieldWorks
    {
      "name": "Attach to local (such as flatpak)",
      "type": "mono",
      "request": "attach",
      "address": "localhost",
      "port": 55555
    },
    // To debug FW unmanaged code in flatpak, run using:
    //   flatpak run --devel --env=FW_DEBUG=true --env=FW_COMMAND_PREFIX="gdbserver 127.0.0.1:9999" --env=FW_MONO_COMMAND=/app/bin/mono-sgen org.sil.FieldWorks
    {
      "type": "gdb",
      "request": "attach",
      "name": "Attach to local gdbserver",
      "executable": "/opt/mono5-sil/bin/mono-sgen",
      "target": "127.0.0.1:9999",
      "remote": true,
      "cwd": "${workspaceRoot}/Output_x86_64/Debug",
      "gdbpath": "/usr/bin/gdb",
      "autorun": [
        "set sysroot target:/",
        // Map source build location to where it is on your workstation to help breakpoints
        // ( https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html#index-default-source-path-substitution ).
        "set substitute-path /run/build/fieldworks ${workspaceRoot}/.."
      ]
    },
  ]
}
